<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         initialize="initApp()"
         creationComplete="loadApp()">

    <fx:Script>
		<![CDATA[
        import com.lalolab.brainmvc.BrainManager;

        import im.lalo.superflex.util.MemoryUtil;

        import mx.collections.ArrayList;

        import im.lalo.superflex.controller.RestCommand;
        import im.lalo.superflex.model.NotifyVo;

        private var notesBox:ArrayList;
        private var notifyVo:NotifyVo;

        protected var rest:RestCommand = RestCommand.getInstance();

        private function initApp():void {
            // 消息盒子
            notesBox = new ArrayList();
            this.addEventListener(Event.REMOVED_FROM_STAGE, removeFromStage);
        }

        /**
         * 从舞台中清除对象
         * @param evt
         */
        private function removeFromStage(evt:Event):void {
            // release notify
            var notifyVo:NotifyVo;
            for (var i:int = 0; i < notesBox.length; i++) {
                notifyVo = notesBox.getItemAt(i) as NotifyVo;
                BrainManager.brain.removeNotification(notifyVo.notify, notifyVo.listener);
            }

            notesBox.removeAll();
            this.removeAllElements();
            cleanGC();
        }

        private function loadApp():void {

        }

        /**
         * 清洗垃圾数据
         */
        protected function cleanGC():void {

        }

        /**
         * 发送消息
         * @param note
         * @param body
         */
        protected function sendNotify(note:String, body:Object = null):void {
            BrainManager.brain.sendNotification(note, body);
        }

        /**
         * 添加侦听器
         * @param notify
         * @param listener
         */
        protected function addRecvNotify(notify:String, listener:Function):void {
            // add box
            notifyVo = new NotifyVo();
            notifyVo.notify = notify;
            notifyVo.listener = listener;
            notesBox.addItem(notifyVo);

            // receiveNotification
            BrainManager.brain.receiveNotification(notify, listener);
        }

        /**
         * 删除侦听
         * @param notify
         * @param listener
         */
        protected function removeNotify(notify:String, listener:Function):void {
            BrainManager.brain.removeNotification(notify, listener);
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

</s:Group>
